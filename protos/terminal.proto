syntax = "proto3";

package terminal;

// Serviço principal do Terminal, chamado pelo Cliente
service Terminal { // Nome do serviço como esperado pelo cliente (TerminalStub)
  // Cliente requisita a locação de um veículo de uma classe específica
  rpc RentACar (RentCarRequest) returns (RentCarResponse); // Método e mensagens atualizados
  // TODO: Adicionar rpc ReturnVehicle (ReturnVehicleRequest) returns (ReturnVehicleResponse);
}

message RentCarRequest {
  string ID_cliente = 1;       // Campo como esperado pelo cliente
  string IP_cliente = 2;       // Campo como esperado pelo cliente
  string Porta_cliente = 3;    // Campo como esperado pelo cliente
  string Classe_veiculo = 4;   // Campo como esperado pelo cliente
}

message RentCarResponse {
  string item_name = 1;     // Nome do veículo se CONCLUIDO, ou nome da classe se PENDENTE
  string status = 2;        // "CONCLUIDO" ou "PENDENTE" (campo esperado pelo cliente)
}

// --- Definições para o Callback Service que o Cliente implementa e o Terminal chama ---
// O cliente do professor espera que estas definições venham de terminal_pb2 e terminal_pb2_grpc

message CallbackMessage {
  string message_content = 1; // Conteúdo da mensagem de callback
}

message CallbackResponse {
  string status = 1;          // Status da resposta do callback (ex: "Callback Recebido OK")
}

// Este é o serviço que o CLIENTE implementa.
// O TERMINAL atuará como CLIENTE deste serviço.
// O cliente do professor define "class CallbackServiceServicer(terminal_pb2_grpc.CallbackServiceServicer):"
// o que significa que esta definição de serviço DEVE estar no terminal.proto
service CallbackService {
  rpc ReceiveCallback(CallbackMessage) returns (CallbackResponse);
}

// TODO: Definir mensagens para ReturnVehicle